/* ================ Сбросс стилей ================ */

* { /* применяется ко всем элементам на странице */
    padding: 0px; /* В данном случае внутренние отступы сверху, снизу, слева и справа будут равны 0 пикселей. Это означает, что содержимое элемента будет начинаться прямо от его границ без какого-либо внутреннего отступа */
    margin: 0px; /* В данном случае внешние отступы сверху, снизу, слева и справа будут равны 0 пикселей. Это означает, что содержимое элемента будет начинаться прямо от его границ без какого-либо внешнего отступа */
    box-sizing: border-box; /* границы и внутренние отступы теперь не увеличивают размер элементов */
}

/* ================ Общие стили ================ */

html,
body {
    font-family: 'Rubik', sans-serif; /* отображение нужных шрифтов */
    font-style: normal; /* Устанавливает нормальный (не курсивный) стиль текста */
    min-width: 375px; /* Устанавливает минимальную ширину для элементов <html> и <body>, чтобы страница не становилась уже 375 пикселей */
}

.container { /* общие настройки по умолчанию */
    height: 100%; /* задает высоту элемента в 100% от высоты его родительского элемента. То есть элемент будет растягиваться на всю доступную высоту контейнера, в котором он находится */
    width: 100%; /* задает ширину элемента в 100% от ширины его родительского элемента. То есть элемент будет растягиваться на всю доступную ширину контейнера, в котором он находится */
    max-width: 1170px; /* задает максимальную ширину элемента. В этом случае элемент не будет шире 500 пикселей, даже если содержимое или родительский контейнер больше */ /* расчёт ширины макета: ширина макета - ( отступ справа + отступ слева) 1400 - ( 130 + 130 ) + padding 15*2 */
    padding: 0 15px; /* внутренние отступы по 0 вверху и внизу и 15px по бокам на мобилках */
    margin-left: auto; /* автоматически устанавливает левый внешний отступ элемента так, чтобы он занимал все возможное пространство слева. В основном используется для выравнивания элементов вправо в контейнере */
    margin-right: auto; /* автоматически устанавливает правый внешний отступ элемента так, чтобы он занимал все возможное пространство справа. В основном используется для выравнивания элементов влево в контейнере */ 
    border: 1px solid red; /* задаёт стиль границы в 1px толщину, solid тип границы и цвет */
}

a { 
    text-decoration: none; /* убираем подчеркивание для ссылок */
}

a:hover {
    text-decoration: underline /* при наведении добавляет подчеркивание ссылкам */
}

ul { 
    list-style: none; /* убираем маркеры у маркированных списков */
}

button {
    border: none; /* убираем фон и границу у кнопок */
    background-color: transparent; /* используется для установки прозрачного фонового цвета для элемента */
    cursor: pointer; /* добавим плавности и сделаем курсор-пальчик, чтобы пользователю было понятно, что на этот элемент можно нажать */
    transition: 0.2s;
}

button:hover {
    transform: translateY(-5px); /* при наведении кнопка немного подпрыгивает вверх на 5px по вертикальной оси */
}

.title { /* Так как мы использовали существующий класс для заголовка в .main-title, то отступы, которые там указаны нам в этой секции не подходят. Поэтому, давай этот класс (без свойства margin-bottom) вынесем в общие стили:  */
    font-weight: 500; /* устанавливает среднюю толщину шрифта */
    font-size: 32px; /* задает размер шрифта 32 пикселей */
    line-height: 43px; /* задает высоту строки 43 пикселей */
    color: #363940; /* устанавливает цвет текста */
}

.text {
    font-weight: 400; /* устанавливает среднюю толщину шрифта */
    font-size: 16px; /* задает размер шрифта 16 пикселей */
    line-height: 22px; /* задает высоту строки 22 пикселей */
    color: #95a1bb; /* устанавливает цвет текста */
}

/* ================ Стили для Хедера ================ */

.header { /* добавляем цвет фона и внутренние отступы */
    background-color: #0a61f7; /* устанавливает цвет фона */
    padding: 14px 0; /* задаёт внутренние отступы в 14px сверху и снизу и 0 отступы слева и справа  */
}

.header-wrapper { /* в этом классе свойствами flexbox расположим эти элементы горизонтально по краям и вертикально по центру */
    display: flex; /* превращает контейнер в flex-контейнер */
    justify-content: space-between; /* распределяет дочерние элементы внутри flex-контейнера так, чтобы первый элемент был прижат к началу контейнера, последний — к концу, а пространство между ними было равномерно распределено */
    align-items: center; /* выравнивает дочерние элементы по центру контейнера вдоль вертикальной оси (если это горизонтальный flex-контейнер */
}

.menu {
    display: flex; /* Устанавливает для контейнера .menu режим flexbox, в котором дочерние элементы автоматически выстраиваются в строку (по горизонтали) */
    gap: 24px; /* Устанавливает расстояние (отступ) в 24 пикселя между дочерними элементами внутри контейнера .menu */
}

.menu-link {
    font-weight: 500; /* устанавливает среднюю толщину шрифта */
    font-size: 12px; /* задает размер шрифта 12 пикселей */
    line-height: 20px; /* задает высоту строки 20 пикселей */
    letter-spacing: 1.4px; /* увеличивает межбуквенное расстояние на 1.4 пикселя */
    text-transform: uppercase; /* преобразует текст в верхний регистр */
    color: #fff; /* устанавливает белый цвет текста */
}

.menu-icon {
    display: none; /* свойство, которое полностью скрывает элемент на веб-странице. Когда элементу присваивается это свойство, он не будет отображаться на странице и не займет места в макете */
}

/* ================ Стили для 1-й секции ================ */

.main-wrapper {
    display: flex; /* устанавливает flex-контейнер */
    justify-content: center; /* выравнивает элементы по центру по горизонтали */
    align-items: center; /* выравнивает элементы по центру по вертикали */
    min-height: 800px; /* устанавливает минимальную высоту контейнера 800 пикселей */
}

.main-img {
    align-self: flex-end; /* это свойство выравнивает элемент по нижнему краю родительского контейнера */
    max-width: 656px; /* задает максимальную ширину элемента. В этом случае элемент не будет шире 656 пикселей, даже если содержимое или родительский контейнер большe */
    width: 100%; /* Устанавливает ширину элемента в 100% от ширины его родительского контейнера, но при этом она не превысит значение max-width: 656px */
}

.main-title {
    font-weight: 500; /* устанавливает среднюю толщину шрифта */
    font-size: 58px; /* задает размер шрифта 58 пикселей */
    line-height: 68px; /* задает высоту строки 68 пикселей */
    color: #363940; /* устанавливает цвет текста */
    margin-bottom: 30px; /* внешний нижний отступ */
}

.main .text {
    margin-bottom: 40px; /* задает внешний отступ (margin) снизу элемента. В данном случае элемент будет иметь отступ в 40 пикселей от нижней границы своего родительского контейнера */
    max-width: 380px; /* задает максимальную ширину элемента. В этом случае элемент не будет шире 380 пикселей, даже если содержимое или родительский контейнер больш */
}

.button {
    font-weight: 500; /* устанавливает среднюю толщину шрифта */
    font-size: 14px; /* задает размер шрифта 14 пикселей */
    line-height: 19.6px; /* задает высоту строки 19.6 пикселей */
    letter-spacing: 1.4px; /* увеличивает межбуквенное расстояние на 1.4 пикселя */
    text-transform: uppercase; /* преобразует текст в верхний регистр */
    color: #fff; /* устанавливает цвет текста */
    background: #0a61f7; /* цвет фона */
    border-radius: 4px; /* задает скругление углов элемента */
    width: 152px; /* ширина */
    height: 51px; /* высота */
}

/* ================ Стили для 2-й секции ================ */

.rates-section {
    background: #f9fafc; /* цвет фона */
    margin: 100px 0; /* внешние отступы сверху и снизу в 100px и по бокам в 0 */
}

.rates-wrapper {
    display: flex; /* устанавливает flex-контейнер */
    flex-direction: column; /* устанавливает направление размещения дочерних элементов внутри flex-контейнера в колонку */
    align-items: center; /* выравнивает элементы по центру по вертикали */
}

.rates-section .title {
    margin-bottom: 20px; /* внешний нижний отступ  */
}

.rates-section .text {
    margin-bottom: 40px; /* внешний нижний отступ  */
    text-align: center; /* выравнивает текст по центру */
}

.table {
    border-collapse: collapse; /* убираю отступы между границами таблицы */
}

th, td { /* Стилизуем по названию тега */
    width: 240px; /* ширина */
    text-align: center; /* выравнивание строчных элементов по центру */
    padding: 15px 0; /* задаёт внутренние отступы в 15px сверху и снизу и 0 отступы слева и справа  */
    border: 1px solid #95a1bb; /* задаёт стиль границы в 1px толщину, solid тип границы и цвет */
}

.table-title {
    font-weight: 500; /* устанавливает среднюю толщину шрифта */
    font-size: 18px; /* задает размер шрифта 18 пикселей */
    line-height: 22px; /* задает высоту строки 22 пикселей */
    color: #363940; /* устанавливает цвет текста */
}

.table-subtitle {
    font-weight: 400; /* устанавливает среднюю толщину шрифта */
    font-size: 14px; /* задает размер шрифта 14 пикселей */
    line-height: 22px; /* задает высоту строки 22 пикселей */
    color: #363940; /* устанавливает цвет текста */
    padding-left: 20px; /* внутренний левый отступ */
    text-align: left; /* выравнивает текст по левому краю элемента */
}

.table-subtitle.gray { /* если у элемента с классом .table-subtitle есть еще класс .gray, тогда установить для него такие-то стили" */
    color: #95a1bb; /* устанавливает цвет текста */
}

.table-link {
    color: #0a61f7; /* устанавливает цвет текста */
}

.table-button {
    font-weight: 500; /* устанавливает среднюю толщину шрифта */
    font-size: 12px; /* задает размер шрифта 12 пикселей */
    line-height: 19.6px; /* задает высоту строки 19.6 пикселей */
    letter-spacing: 1.4px; /* увеличивает межбуквенное расстояние на 1.4 пикселя */
    text-transform: uppercase; /* преобразует текст в верхний регистр */
    color: #0a61f7; /* устанавливает цвет текста */
    padding: 8px 0; /* задаёт внутренние отступы в 8px сверху и снизу и 0 отступы слева и справа  */
    border: 1px solid #0a61f7; /* задаёт стиль границы в 1px толщину, solid тип границы и цвет */
    border-radius: 4px; /* задает скругление углов элемента */
    width: 140px; /* ширина */
}

.table-button.active { /* если у элемента с классом .table-button есть еще класс .active, тогда установить для него такие-то стили" */
    background: #0a61f7; /* задает цвет фона */
    color: #fff; /* задает цвет текста */
}

.table-footer td{ /* Такие названия классов читаются задом наперед: "для всех тегов <td>, которые находятся внутри элемента с классом .table-footer применить такие-то стили" */
    padding: 30px 0; /* задаёт внутренние отступы в 30px сверху и снизу и 0 отступы слева и справа  */
}

/* ================ Стили для 3-й секции ================ */

.create-account-section {
    padding: 100px 0; /* задаёт внутренние отступы в 100px сверху и снизу и 0 отступы слева и справа  */
}

.account-wrapper {
    display: flex; /* Устанавливает для элемента .account-wrapper режим flexbox */
    justify-content: space-between; /* Распределяет дочерние элементы внутри flex-контейнера .account-wrapper таким образом, чтобы первый элемент был прижат к началу контейнера, последний — к концу, а промежутки между элементами были равномерно распределены */
}

.create-account-section .title {
    margin-bottom: 50px; /* внешний нижний отступ */
}

.create-account-section .text {
    margin-bottom: 40px; /* внешний нижний отступ */
    max-width: 500px; /* задает максимальную ширину элемента. В этом случае элемент не будет шире 500 пикселей, даже если содержимое или родительский контейнер больш */
}

.list-item {
    list-style-image: url(./assets/images/Check.svg); /* наша иконка вместо обычных маркеров */
    margin-left: 30px; /* внешний отступ слева */
    margin-bottom: 15px; /* внешний отступ снизу */
    color: #363940; /* устанавливает цвет текста */
}

form {
    width: 100%; /* устанавливает ширину формы на 100% от ширины родительского элемента */
    max-width: 500px; /* устанавливает максимальную ширину формы до 500 пикселей */
    display: flex; /* устанавливает flexbox для формы */
    flex-direction: column; /* располагает дочерние элементы формы в столбец */
    gap: 20px; /* задает промежуток в 20 пикселей между дочерними элементами формы */
}

input, select, fieldset, textarea {
    border-radius: 4px; /* задает скругление углов элемента */
    border: 1px solid #95A1BB; /* задаёт стиль границы в 1px толщину, solid тип границы и цвет */
    padding: 14px 15px; /* задаёт внутренние отступы в 14px сверху и снизу и 15px отступы слева и справа  */
}

input, select, fieldset, textarea, label, legend, input::placeholder, select::placeholder, textarea::placeholder {
    font-weight: 400; /* устанавливает среднюю толщину шрифта */
    font-size: 16px; /* задает размер шрифта 16 пикселей */
    line-height: 22.4px; /* задает высоту строки 22.4 пикселей */
    color: #95a1bb; /* устанавливает цвет текста */
    font-family: inherit; /* у элемента будет шрифт как у ближайшего родителя, в котором указано данное свойство */
}

input[type="text"] { /* обращение по атрибуту */
    width: 100%; /* задает ширину элемента в 100% от ширины его родительского элемента. То есть элемент будет растягиваться на всю доступную ширину контейнера, в котором он находится */
}

input[type="email"], [type="password"], [type="date"], [type="email"], select { /* квадратные скобки используются для указания атрибутных селекторов. Эти селекторы позволяют применять стили к элементам, имеющим определенные атрибуты и их значения. Например, селектор input[type="email"] выбирает все элементы <input>, у которых атрибут type имеет значение email */
    width: 230px; /* ширина */
    height: 50px; /* высота */
    flex-grow: 1; /* чтобы поля ввода поделили между собой все свободное пространство по ширине */
}

input[type="radio"],input[type="checkbox"], input[type="date"], select { /* обращение по атрибуту и тегам */
    cursor: pointer; /* устанавливает форму курсора при наведении на элемент в виде указателя */
}

.stack,
fieldset { /* обращение по классу и тегу */
    display: flex; /* устанавливает контейнер в режим flexbox */
    column-gap: 30px; /* задает расстояние между столбцами внутри flex-контейнера */
}

.fields-wrapper { /* будут скидываться вниз, когда не помещаются в родителе */
    display: flex; /* устанавливает контейнер в режим flexbox */
    flex-wrap: wrap; /* элементы будут переноситься на новую строку, если они не помещаются в одну строку по горизонтали или вертикали */
    gap: 20px; /* задает расстояние между столбцами внутри flex-контейнера */
}

fieldset {
    width: 100%; /* задает ширину элемента в 100% от ширины его родительского элемента. То есть элемент будет растягиваться на всю доступную ширину контейнера, в котором он находится */
    padding: 30px 15px; /* нижний отступ сверху и снизу в 30px и 15px по бокам */
}

textarea {
    width: 100%; /* задает ширину элемента в 100% от ширины его родительского элемента. То есть элемент будет растягиваться на всю доступную ширину контейнера, в котором он находится */
    min-height: 80px; /* задает минимальную высоту, элемент не может быть ниже 80 пикселей, даже если его содержимое меньше этого значения */
    resize: none; /* отменить возможность изменения размера <textarea> */
}

form .button {
    width: 100%; /* задает ширину элемента в 100% от ширины его родительского элемента. То есть элемент будет растягиваться на всю доступную ширину контейнера, в котором он находится */
}

select {
    background: url(./assets/images/Arrow-down.svg) no-repeat 15px top 50%; /* фоновое изображение не должно повторяться и должно отображаться только один раз. */
    appearance: none; /* используется для удаления стандартного стилизованного внешнего вида элемента управления */
}

input[type="date"]::-webkit-calendar-picker-indicator {
    background: url(./assets/images/Calendar.svg) no-repeat; /* севдоэлемент WebKit, который предоставляет стилизацию элемента выбора календаря в <input type="date"> и устанавливает фоновое изображение для элемента выбора календаря */
}

/* ================ Стили для футера ================ */

footer {
    background-color: #0a61f7; /* устанавливает цвет фона элемента */
    text-align: center; /* выравнивает текст по центру */
    padding: 20px 0; /* задаёт внктренние отступы сверху и снизу в 20px и по бокам в 0 */
}

small {
    font-weight: 400; /* устанавливает среднюю толщину шрифта */
    font-size: 14px; /* задает размер шрифта 14 пикселей */
    line-height: 22px; /* задает высоту строки 22 пикселей */
    color: #fff; /* цвет текста */
}

/* =================== Адаптив под планшеты =================== */

@media screen and (max-width: 1440px) /* Напишем медиазапрос для всех экранов, у которых ширина будет меньше 1400px */ { 
    .main-wrapper {
        flex-direction: column; /* свойство CSS для flexbox, которое располагает дочерние элементы в столбец внутри контейнера. Это означает, что элементы будут выстраиваться один под другим по вертикали, а не рядом по горизонтали */
        min-height: auto; /* задает минимальную высоту для контейнера, которая автоматически определяется в зависимости от содержимого внутри него. Если содержимое увеличивается, высота контейнера также будет расти, чтобы поддерживать его */
    }

    .main-info { /* перемещает отдельный флекс-элемент внутри флекс-контейнера, блок с текстом пододвинем влево */
        align-self: flex-start; /* свойство применяется к элементу flexbox и выравнивает его по верхнему краю контейнера. Оно переопределяет общее выравнивание дочерних элементов в flex-контейнере */
        margin: 100px 0 80px; /* устанавливает внешние отступы для элемента 100 сверху 0 по бокам и 80 снизу */
    }

    .main-img {
        align-self: center; /* свойство, которое применяется к дочернему элементу в flex-контейнере и выравнивает его по центру в направлении поперечной оси (в случае вертикального контейнера) или горизонтальной оси (в случае горизонтального контейнера) */
    }

    .table {
        width: 940px; /* ширина */
    }

    .table-wrapper {
        overflow-x: auto;
        width: 100%; /* задает ширину элемента в 100% от ширины его родительского элемента. То есть элемент будет растягиваться на всю доступную ширину контейнера, в котором он находится */
        max-width: 940px;
    }

    .account-wrapper {
        flex-direction: column; /* свойство CSS для flexbox, которое располагает дочерние элементы в столбец внутри контейнера. Это означает, что элементы будут выстраиваться один под другим по вертикали, а не рядом по горизонтали */
        gap: 70px; /* используется для установки расстояния (отступа) между элементами внутри контейнера */
    }

    label {
        white-space: nowrap; /* предотвращает перенос текста на новую строку внутри элемента. Это значит, что текст будет отображаться в одну строку, несмотря на размеры элемента */
    }

    fieldset {
        flex-wrap: wrap; /* позволяет дочерним элементам переноситься на новую строку, если они не помещаются в одну */
        row-gap: 20px; /* устанавливает промежуток в 20 пикселей между строками */
    }

    .create-account-section .text {
        max-width: unset; /* свойство удаляет любое ранее установленное значение max-width для элемента, фактически убирая ограничение на максимальную ширину элемента. Значение unset сбрасывает свойство на его первоначальное (initial) значение */
    }

    form {
        align-self: center; /* свойство, которое применяется к дочернему элементу в flex-контейнере и выравнивает его по центру в направлении поперечной оси (в случае вертикального контейнера) или горизонтальной оси (в случае горизонтального контейнера) */
    }

} 

/* =================== Адаптив под мобилки =================== */

@media screen and (max-width: 576px) {
    .menu {
        display: none; /* свойство, которое полностью скрывает элемент на веб-странице. Когда элементу присваивается это свойство, он не будет отображаться на странице и не займет места в макете */
    }
    .menu-icon {
        display: block; /* свойство, которое задает блочное отображение для элемента. Элементы с этим значением отображаются как блочные, что означает, что они занимают всю доступную ширину, и каждый такой элемент начинается с новой строки */
    }

    .main-info {
        margin: 60px 0; /* внешние отступы сверху и снизу в 60px и по бокам в 0 */
    }

    .main-title {
        font-size: 52px; /* задает размер шрифта 52 пикселей */
        line-height: 60px; /* задает высоту строки 60 пикселей */
    }

    .account-wrapper {
        gap: 60px; /* отступы между элементами */
    }

}